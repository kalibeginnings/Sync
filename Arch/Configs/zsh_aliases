PATH=$PATH:$HOME/Tools:
echo "\n[*] Your IP is" $(curl -s https://dnsleaktest.com | grep Hello | cut -d " " -f 3 | cut -d "<" -f 1)"\n"

#My Functions

function pacupdate {   	# Complete update and upgrade
	git -C $HOME/Sync pull;
	sudo pacman -Syyu;
	sudo pacman -Rcns $(sudo pacman -Qdtq)
}

function mirrors {		# Update my mirror list with the fastest mirrors
	sudo reflector --latest 20 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
}

function aliases {
    local help_displayed=false

    if [ "$#" -eq 0 ]; then
        nano "$HOME/.zsh_aliases"
        git -C Sync add Arch/Configs/zsh_aliases
        git -C Sync commit -m 'Saved zsh_aliases'
        git -C Sync push
        pull
        return
    fi

    case "$1" in
        "-w" | "--web")
            firefox "https://github.com/kalibeginnings/Sync/edit/main/Arch/Configs/zsh_aliases"
            shift
            ;;
        "-u" | "--update")
            git -C Sync add Arch/Configs/zsh_aliases
            git -C Sync commit -m 'Saved'
            git -C Sync push
            pull
            shift
            ;;
        "-h" | "--help")
            echo "Syntax: aliases [-w|--web|-u|--update|-h|--help]"
            echo "Description: Edit and synchronize the .zsh_aliases file."
            echo "  -w, --web      Open the .zsh_aliases file on GitHub with firefox."
            echo "  -u, --update   Add, commit, and push changes to the .zsh_aliases file to GitHub, and then pull from GitHub."
            echo "  -h, --help     Display this help message."
            help_displayed=true
            ;;
        *)
            echo "Invalid option: $1"
            return 1
            ;;
    esac

    # Check if there are any remaining arguments after processing the first option
    if [ "$#" -ne 0 ]; then
        if ! $help_displayed || [ "$1" != "-h" -a "$1" != "--help" ]; then
            aliases "$@"
        fi
    fi
}

function pull {			# Pull changes into my Sync directory
	git -C /home/blackarch/Sync pull
	source $HOME/Sync/Arch/Configs/zsh_aliases
}

function zshrc {
    local help_displayed=false

    if [ "$#" -eq 0 ]; then
        nano "$HOME/.zshrc"
        git -C Sync add Arch/Configs/zshrc
        git -C Sync commit -m 'Saved zshrc'
        git -C Sync push
        pull
        return
    fi

    case "$1" in
        "-w" | "--web")
            firefox "https://github.com/kalibeginnings/Sync/edit/main/Arch/Configs/zshrc"
            shift
            ;;
        "-u" | "--update")
            git -C Sync add .
            git -C Sync commit -m 'Saved'
            git -C Sync push
            pull
            shift
            ;;
        "-h" | "--help")
            echo "Syntax: zshrc [-w|--web|-u|--update|-h|--help]"
            echo "Description: Edit and synchronize the .zshrc file."
            echo "  -w, --web      Open the .zshrc file on GitHub with Firefox."
            echo "  -u, --update   Add, commit, and push changes to the .zshrc file to GitHub, and then pull from GitHub."
            echo "  -h, --help     Display this help message."
            help_displayed=true
            ;;
        *)
            echo "Invalid option: $1"
            return 1
            ;;
    esac

    # Check if there are any remaining arguments after processing the first option
    if [ "$#" -ne 0 ]; then
        if ! $help_displayed || [ "$1" != "-h" -a "$1" != "--help" ]; then
            zshrc "$@"
        fi
    fi
}

function zsh_ngrok {
    local help_displayed=false

    if [ "$#" -eq 0 ]; then
        nano "$HOME/.zsh_ngrok"
        git -C Sync add Arch/Configs/zsh_ngrok
        git -C Sync commit -m 'Saved zsh_ngrok'
        git -C Sync push
        pull
        return
    fi

    case "$1" in
        "-w" | "--web")
            firefox "https://github.com/kalibeginnings/Sync/edit/main/Arch/Configs/zsh_ngrok"
            shift
            ;;
        "-u" | "--update")
            git -C Sync add .
            git -C Sync commit -m 'Saved'
            git -C Sync push
            pull
            shift
            ;;
        "-h" | "--help")
            echo "Syntax: zsh_ngrok [-w|--web|-u|--update|-h|--help]"
            echo "Description: Edit and synchronize the .zsh_ngrok file."
            echo "  -w, --web      Open the .zsh_ngrok file on GitHub with Firefox."
            echo "  -u, --update   Add, commit, and push changes to the .zsh_ngrok file to GitHub, and then pull from GitHub."
            echo "  -h, --help     Display this help message."
            help_displayed=true
            ;;
        *)
            echo "Invalid option: $1"
            return 1
            ;;
    esac

    # Check if there are any remaining arguments after processing the first option
    if [ "$#" -ne 0 ]; then
        if ! $help_displayed || [ "$1" != "-h" -a "$1" != "--help" ]; then
            zsh_ngrok "$@"
        fi
    fi
}

function help {	        	# Shows all of my Custom Functions
        list=()
        list[1]=(" NAME:    DESCRIPTION\n")
        x=0
        for i in {1..$(grep "function" .zsh_aliases| sed "/#function/d" | wc -l)}; do 
        x=$((x+1))
        name=$(grep "function" $HOME/.zsh_aliases| sed "/#function/d" | awk '{print $2}' | sed -n "${x}p")
        description=$(grep "function" .zsh_aliases| sed "/#function/d" | cut -d# -f2 | sed -n "${x}p")
        list[$((x+1))]=("$name:$description\n");
        done
        head=$( echo $list |  column --table --output-width=50 --separator=: | sed -n "1p")
        body=$( echo "${list[@]:1}" |  column --table --output-width=50 --separator=:)
        echo '\e[31m'$head'\e[0m'
        echo $body
}

function show_aliases() {
  alias | sed 's/=.*//' | while read -r alias_name; do
    printf "%-20s %s\n" "$alias_name" "${(A)aliases[$alias_name]}"
  done
}

function pacfix {
    if [[ $1 == "list" ]]; then
        echo "The following packages are broken:"
        echo $(sudo pacman -Qk | grep -v ' 0 missing files' | cut -d: -f1)
        echo ""
    else
        sudo pacman -Syyu --needed
        sudo pacman -Qk | grep -v ' 0 missing files' | cut -d: -f1 | while read -r package_name; do
            sudo pacman -S "$package_name" --overwrite "*" --noconfirm
        done
    fi
}

_t() {
    local cur=${COMP_WORDS[COMP_CWORD]}
    local prev=${COMP_WORDS[COMP_CWORD-1]}
    local options="new help"
    options+=" new-session detach attach kill-session switch-client list-sessions \
    list-clients list-commands list-keys list-buffers capture-pane \
    choose-tree clock confirm-before copy-mode display-message \
    display-panes find-window join-pane load-buffer lock-server \
    choose-buffer move-window next-window next-layout paste-buffer \
    pipe-pane previous-window refresh-client rename-session \
    rename-window resize-pane resize-window rotate-window \
    select-layout select-pane select-window send-keys send-prefix \
    server-info set-buffer show-environment show-messages \
    source-file split-window swap-pane swap-window \
    unlink-window wait-for"

    COMPREPLY=( $(compgen -W "$options" -- $cur) )
    return 0
}
complete -F _t t


function t {
  if [[ $# -eq 0 ]]; then
    if ! tmux ls >/dev/null 2>&1; then
      tmux new-session -s main
    else
      tmux attach-session
    fi
  else
    case "$1" in
      -h|help)
        echo "Usage: t [-n SESSION] [TMUX_OPTIONS...]"
        echo ""
        echo "Start a new tmux session or attach to an existing one."
        echo ""
        echo "Options:"
        echo "  -n, --new SESSION    Create a new tmux session with the specified name."
        echo "  -h, --help           Show this help message and exit."
        echo ""
        echo "Additional options for tmux (use 'tmux man' for more info):"
        echo "  -2                    Force tmux to assume the terminal supports 256 colors."
        echo "  -C                    Start a new session but don't attach to it."
        echo "  -f FILENAME           Specify an alternate configuration file."
        echo "  -L SESSIONNAME        Name the session (default: last component of the current path)."
        echo "  -S SOCKETNAME         Connect to a specified socket."
        echo "  -u                    Target the most recently used session."
        echo ""
        echo "Any additional arguments are passed to tmux as-is."
        ;;
      -n|new)
        tmux new-session -s "${2:-main}"
        ;;
      *)
        tmux "$@"
        ;;
    esac
  fi
}


function e {			# Exit Session
	exit
}

function myip {			# Show if Your IP is Hidden or Not
	echo "\n[*] Your IP is" $(curl -s https://dnsleaktest.com | grep Hello | cut -d " " -f 3 | cut -d "<" -f 1)
}

function cpu {			# Monitors CPU Every Nth Seconds
	iostat -c $1
}

function cheat {
    case "$1" in
        "help"|"--help"|"-h")
            cat << EOF
cheat <command>             Query a specific command
cheat <language><question>  Query how to accomplish something in a specific language
cheat learn <language>      Learn any of 60 languages from your shell
EOF
            ;;
        "shell"|"--shell"|"-s")
            cheat-sh --shell
            ;;
        "learn"|"--learn"|"-l")
            curl -s cheat.sh/$2/:learn | less
            ;;
        *)
            if [ $# -gt 1 ]; then
                curl -s cheat.sh/$*
            else
                curl -s cheat.sh/$1
            fi
            ;;
    esac
}


#function search {		
#	for i in $(find /usr/bin/ -name "$1*" | sed "s|/usr/bin/||g") ; do pacman -Qi $i >> /tmp/commands.txt 2>&1; done
#	sed -i '/Name\|Description\|URL/!d' /tmp/commands.txt
#	sed -i "s|Name|\nName|g" /tmp/commands.txt
#	cat /tmp/commands.txt
#	rm /tmp/commands.txt
#}

function package {			# Find Commands associated with a package
	for i in $(pacman -Qsq $@); do echo '\e[31m'"---$i---"'\e[0m'; pacman -Ql $i | sed -n -e 's/.*\/bin\///p' | tail -n +2; echo ""; done
}

function pacsearch {			# Search a descriptive list of packages
	for i in $(pacman -Ssq $@); do 
		pacman -Si $i | grep "Name\|Description\|URL"
		echo "\n"; 
	done
}

function search {			# Search a descriptive list of packages in a table
	declare -a results
	results[1]="  Name+       Description+                        URL\n"
	x=1
	list=$(pacman -Ssq $@)
	for i in $(echo $list); do
		x=$((x+1))
		name=$i
		description=$(pacman -Si $i 2>&1 | grep "Description" | sed "s|Description ||g" )
		url=$(pacman -Si $i 2>&1 | grep "URL" | sed "s|URL ||g")
		results[$x]="$name+$description+$url\n";
	done
	echo $results | column --table --table-columns=3 --separator=+ --table-wrap=3
}


function checkports {
    # Identify which ports are currently open on local machine

    local usage="Usage: checkports [-h|--help] [-a|--all] [-t <timing>] [-r <protocol>] [<IP address>]"
    local helpmsg="Options:
    -h, --help         display this help and exit
    -a, --all          scan all ports (not just top 1000)
    -t, --timing       set timing template (0-5) (higher is faster but less accurate)
    -r, --protocol     set protocol to use for scanning (TCP or UDP)
    "
    local ip="127.0.0.1"
    local ports=""


    # Parse command-line options
    while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
        echo "$usage"
        echo "$helpmsg"
        return 0
        ;;
        -a|--all)
        ports="-p-"
        ;;
        -t|--timing)
        if [[ "$2" =~ ^[0-5]$ ]]; then
            timing="-T$2"
            shift
        else
            echo "Error: Invalid timing value. Timing must be between 0-5."
            echo "$usage"
            return 1
        fi
        ;;
        -r|--protocol)
        if [[ "$2" =~ ^(TCP|UDP)$ ]]; then
            protocol="-s$2"
            shift
        else
            echo "Error: Invalid protocol specified. Protocol must be either TCP or UDP."
            echo "$usage"
            return 1
        fi
        ;;
        *)
        if [[ "$#" -eq 0 ]]; then
    		ports="-p-"
        elif [[ "$1" =~ ^[0-9]+\-[0-9]+$ ]]; then
            ports="-p${1}"
        else
            ports="$1"
        fi
        ;;
    esac
    shift
    done

    nmap $protocol $timing $ports $ip
  
}


function services {		# Show which services are currently running
	systemctl | grep running
}

function port {  		# Identify the service behind specific port(s)
	sudo lsof -i:$1
}

function harden {  		# Analyze a specific service's security
	/usr/bin/systemd-analyze security $1
}

function juice {		# Start SSH service and ngrok tunnel
	sudo systemctl start sshd && tmux -c "ngrok tcp 55555 -authtoken 1yKy2AnObahtJLj4SPLP3HvTMJX_7ztaCXBfomodfgTNh3rqN"
}

function maskurl {		# Mask an URL
	sudo python3 $HOME/Tools/maskurl/maskurl.py
}

function start {		# Start a Service
	sudo systemctl start $1
}

function status {		# Status of a Service
        sudo systemctl status $1
}

function stop {                # Stop a Service
        sudo systemctl stop $1
}

function googledns {		# Change DNS to Google for Faster network
	sed -i "s/nameserver/\#nameserver/" /etc/resolv.conf &&
	echo "nameserver 8.8.8.8\nnameserver 8.8.4.4" >> /etc/resolv.conf
}

##############################################################################
# COLORS AND BACKGROUNDS 
##############################################################################
# note: \e or \x1B also work instead of \033 
# Reset
#Color_Off='\033[0m' # Text Reset

# Regular Colors
#Black='\033[0;30m'  # Black
#Red='\033[0;31m'    # Red
#Green='\033[0;32m'  # Green
#Yellow='\033[0;33m' # Yellow
#Blue='\033[0;34m'   # Blue
#Purple='\033[0;35m' # Purple
#Cyan='\033[0;36m'   # Cyan
#White='\033[0;97m'  # White

# Additional colors
#LGrey='\033[0;37m'  # Ligth Gray
#DGrey='\033[0;90m'  # Dark Gray
#LRed='\033[0;91m'   # Ligth Red
#LGreen='\033[0;92m' # Ligth Green
#LYellow='\033[0;93m'# Ligth Yellow
#LBlue='\033[0;94m'  # Ligth Blue
#LPurple='\033[0;95m'# Light Purple
#LCyan='\033[0;96m'  # Ligth Cyan


# Bold
#BBlack='\033[1;30m' # Black
#BRed='\033[1;31m'   # Red
#BGreen='\033[1;32m' # Green
#BYellow='\033[1;33m'# Yellow
#BBlue='\033[1;34m'  # Blue
#BPurple='\033[1;35m'# Purple
#BCyan='\033[1;36m'  # Cyan
#BWhite='\033[1;37m' # White

# Underline
#UBlack='\033[4;30m' # Black
#URed='\033[4;31m'   # Red
#UGreen='\033[4;32m' # Green
#UYellow='\033[4;33m'# Yellow
#UBlue='\033[4;34m'  # Blue
#UPurple='\033[4;35m'# Purple
#UCyan='\033[4;36m'  # Cyan
#UWhite='\033[4;37m' # White

# Background
#On_Black='\033[40m' # Black
#On_Red='\033[41m'   # Red
#On_Green='\033[42m' # Green
#On_Yellow='\033[43m'# Yellow
#On_Blue='\033[44m'  # Blue
#On_Purple='\033[45m'# Purple
#On_Cyan='\033[46m'  # Cyan
#On_White='\033[47m' # White



#### Key Bindings
#### C-up		# Update
#### C-down		# Anonymize Shell
## Run showkey -a to list characters for specific key combo and then "bindkey -s 'key' 'command\n'"
bindkey -s '^[[1;5A' 'update\n'
bindkey -s '^[[1;5B' 'sudo service tor start && proxychains4 zsh\n'
